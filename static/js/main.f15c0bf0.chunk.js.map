{"version":3,"sources":["Active.js","InfoBox.js","util.js","Map.js","Table.js","Graph.js","ThemeSwitch.js","GlobalStyles.js","Theme.js","App.js","index.js"],"names":["Active","className","InfoBox","title","cases","total","colorClass","active","props","Card","onClick","CardContent","Typography","casesSeverityColors","hex","multiplier","recovered","deaths","graphColors","backgroundColor","borderColor","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","Map","countries","casesType","center","zoom","bounds","lat","lng","minZoom","maxZoom","maxBounds","TileLayer","url","attribution","map","country","index","Circle","countryInfo","long","fillOpacity","color","fillColor","radius","Math","sqrt","key","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","displayFormats","month","yAxes","gridLines","ticks","callback","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","Graph","useState","setData","defaults","global","defaultFontColor","useEffect","fetch","then","res","json","fetchData","length","datasets","setGraphColors","ThemeSwitch","isChecked","onChange","FormControlLabel","control","Switch","checked","GlobalStyles","createGlobalStyle","theme","body","text","infoboxColor","infoboxText","tableOddColor","lightTheme","toggleBorder","background","graphTextColor","darkTheme","App","worldCenter","setCountries","setCountry","setCountryInfo","tableData","setTableData","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","setIsChecked","setTheme","console","log","getGlobalData","localTheme","window","localStorage","getItem","setItem","name","iso2","handleCountryChange","e","countryCode","target","FormControl","Select","variant","MenuItem","todayCases","todayRecovered","todayDeaths","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f15c0bf0.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Active.css'\r\n\r\nfunction Active({ className }) {\r\n    return (\r\n        <div className={`active ${className}`} >\r\n            <div className='glow'></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Active;\r\n","import React from 'react';\r\nimport { Card, CardContent, Typography } from '@material-ui/core';\r\nimport Active from './Active';\r\nimport './InfoBox.css'\r\n\r\nfunction InfoBox({ title, cases, total, colorClass, active, ...props }) {\r\n\r\n    return (\r\n        <Card className={`infoBox ${colorClass}`} onClick={props.onClick}>\r\n            <CardContent>\r\n                <Typography className=\"infoBox-title\">{title}</Typography>\r\n                <h2 className={`infoBox-cases`}>{cases}</h2>\r\n                <h5 className=\"total-label\">Total</h5>\r\n                <Typography className=\"infoBox-total\">{total}</Typography>\r\n                <Active className={active ? `${colorClass}-selected` : ''} />\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React from 'react';\r\nimport numeral from 'numeral';\r\nimport { Circle, Popup } from 'react-leaflet';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\n\r\nconst casesSeverityColors = {\r\n    cases: {\r\n        hex: \"#f28346\",\r\n        multiplier: 800,\r\n    },\r\n    recovered: {\r\n        hex: \"#41db4b\",\r\n        multiplier: 1200,\r\n    },\r\n    deaths: {\r\n        hex: \"#ff4852\",\r\n        multiplier: 2000,\r\n    }\r\n};\r\n\r\nconst graphColors = {\r\n    cases: {\r\n        backgroundColor: 'rgba(255, 106, 60, .5)',\r\n        borderColor: 'rgba(255, 106, 60, 1)',\r\n    },\r\n    recovered: {\r\n        backgroundColor: 'rgba(65, 219, 75, .5)',\r\n        borderColor: 'rgba(65, 219, 75, 1)',\r\n    },\r\n    deaths: {\r\n        backgroundColor: 'rgba(180, 2, 36, .5)',\r\n        borderColor: 'rgba(180, 2, 36, 1)',\r\n    }\r\n}\r\n\r\n//Sort countries by cases\r\nexport const sortData = data => {\r\n    const sortedData = [...data];\r\n\r\n    sortedData.sort((a, b) => {\r\n        return a.cases > b.cases ? -1 : 1\r\n    });\r\n    return sortedData;\r\n};\r\n\r\nexport const prettyPrintStat = (stat) => {\r\n    return stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n}\r\n\r\nexport const showDataOnMap = (data, casesType = 'cases') => (\r\n    data.map((country, index) => (\r\n        <Circle\r\n            center={[country.countryInfo.lat, country.countryInfo.long]}\r\n            fillOpacity={0.4}\r\n            color={casesSeverityColors[casesType].hex}\r\n            fillColor={casesSeverityColors[casesType].hex}\r\n            radius={\r\n                Math.sqrt(country[casesType]) * casesSeverityColors[casesType].multiplier\r\n            }\r\n            key={index}\r\n        >\r\n            <Popup>\r\n                <div className=\"info-container\">\r\n                    <div\r\n                        className=\"info-flag\"\r\n                        style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n                    />\r\n                    <div className=\"info-name\">{country.country}</div>\r\n                    <div className=\"info-confirmed\">\r\n                        Cases: {numeral(country.cases).format(\"0,0\")}\r\n                    </div>\r\n                    <div className=\"info-recovered\">\r\n                        Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n                    </div>\r\n                    <div className=\"info-deaths\">\r\n                        Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n                    </div>\r\n                </div>\r\n            </Popup>\r\n        </Circle>\r\n    ))\r\n);\r\n\r\nexport const setGraphColors = (data, options, casesType) => {\r\n    return (<Line\r\n        data={{\r\n            datasets: [\r\n                {\r\n                    backgroundColor: graphColors[casesType].backgroundColor,\r\n                    borderColor: graphColors[casesType].borderColor,\r\n                    data: data\r\n                },\r\n            ],\r\n        }}\r\n        options={options}\r\n    />)\r\n};","import React from 'react';\r\nimport './Map.css';\r\nimport { Map as LeafletMap, TileLayer } from 'react-leaflet';\r\nimport { showDataOnMap } from './util';\r\n\r\nconst Map = ({ countries, casesType, center, zoom }) => {\r\n\r\n    const southWest = { lat: -89.98155760646617, lng: -180 }\r\n    const northEast = { lat: 89.99346179538875, lng: 180 }\r\n    const bounds = [southWest, northEast];\r\n\r\n    return (\r\n        <div className=\"map\">\r\n            <LeafletMap center={center} zoom={zoom} minZoom={1} maxZoom={5} maxBounds={bounds} >\r\n                <TileLayer\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    attribution='&copy; <a href=\"https://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                />\r\n                {showDataOnMap(countries, casesType)}\r\n            </LeafletMap>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map;\r\n","import React from 'react';\r\nimport numeral from 'numeral';\r\nimport './Table.css';\r\n\r\nfunction Table({ countries }) {\r\n    return (\r\n        <div className=\"table\">\r\n            <table>\r\n                <tbody>\r\n                    {countries.map(({ country, cases }, index) => (\r\n                        <tr key={index}>\r\n                            <td>{country}</td>\r\n                            <td>\r\n                                <strong>{numeral(cases).format(\"0,0\")}</strong>\r\n                            </td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table;\r\n","import React, { useState, useEffect } from 'react';\r\nimport numeral from 'numeral';\r\nimport { defaults } from 'react-chartjs-2';\r\nimport { setGraphColors } from './util';\r\n\r\nconst options = {\r\n    legend: {\r\n        display: false,\r\n    },\r\n    elements: {\r\n        point: {\r\n            radius: 0,\r\n        },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n        mode: \"index\",\r\n        intersect: false,\r\n        callbacks: {\r\n            label: function (tooltipItem, data) {\r\n                return numeral(tooltipItem.value).format(\"+0,0\");\r\n            },\r\n        },\r\n    },\r\n    scales: {\r\n        xAxes: [\r\n            {\r\n                type: \"time\",\r\n                time: {\r\n                    displayFormats: {\r\n                        month: \"MMM YYYY\"\r\n                    }\r\n                },\r\n            },\r\n        ],\r\n        yAxes: [\r\n            {\r\n                gridLines: {\r\n                    display: false,\r\n                },\r\n                ticks: {\r\n                    callback: function (value, index, values) {\r\n                        return numeral(value).format(\"0a\");\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n    },\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n    const chartData = [];\r\n    let lastDataPoint;\r\n\r\n    for (let date in data.cases) {\r\n        if (lastDataPoint) {\r\n            let newDataPoint = {\r\n                x: date,\r\n                y: data[casesType][date] - lastDataPoint\r\n            }\r\n            chartData.push(newDataPoint);\r\n        }\r\n        lastDataPoint = data[casesType][date];\r\n    }\r\n    return chartData;\r\n};\r\n\r\nfunction Graph({ casesType, ...props }) {\r\n    const [data, setData] = useState({});\r\n    defaults.global.defaultFontColor = 'black';\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            await fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120')\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    let chartData = buildChartData(data, casesType);\r\n                    setData(chartData);\r\n                });\r\n        }\r\n        fetchData();\r\n    }, [casesType]);\r\n\r\n    return (\r\n        <div className={props.className}>\r\n            {data?.length > 0 && setGraphColors(data, options, casesType)}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Graph\r\n","import React from 'react';\r\nimport { FormControlLabel, Switch } from '@material-ui/core';\r\n\r\nfunction ThemeSwitch({ isChecked, onChange }) {\r\n    return (\r\n        <div className=\"switch\">\r\n            < FormControlLabel\r\n                control={< Switch\r\n                    checked={isChecked}\r\n                    onChange={onChange}\r\n                    color=\"primary\"\r\n                />}\r\n                label={isChecked ? 'Dark Mode' : 'Light Mode'}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ThemeSwitch;\r\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyles = createGlobalStyle`\r\n  body {\r\n    margin: 0;\r\n    background: ${({ theme }) => theme.body};\r\n    color: ${({ theme }) => theme.text};\r\n    font-family: -apple-system, BlinkMacSystemFont, 'Ubuntu', 'Roboto', 'Segoe UI', sans-serif;\r\n    transition: all 0.50s linear;\r\n  }\r\n  .MuiPaper-root  {\r\n    background: ${({ theme }) => theme.infoboxColor};\r\n    color: ${({ theme }) => theme.text};\r\n  }\r\n  .MuiSelect-root.MuiSelect-select.MuiSelect-selectMenu.MuiSelect-outlined.MuiInputBase-input.MuiOutlinedInput-input  {\r\n    background: ${({ theme }) => theme.infoboxColor};\r\n    color: ${({ theme }) => theme.text};\r\n  }\r\n  .total-label, .infoBox-total {\r\n    color: ${({ theme }) => theme.infoboxText};\r\n  }\r\n  .map {\r\n    background: ${({ theme }) => theme.infoboxColor};\r\n  }\r\n  .table tr:nth-of-type(odd) {\r\n    background-color: ${({ theme }) => theme.tableOddColor};\r\n}\r\n\r\n  `\r\n","export const lightTheme = {\r\n    body: '#eaeaea',\r\n    text: '#363537',\r\n    toggleBorder: '#eaeaea',\r\n    background: '#363537',\r\n    infoboxColor: '#ffffff',\r\n    infoboxText: '#6c757d',\r\n    tableOddColor: '#eaeaea',\r\n    graphTextColor: '#363537'\r\n}\r\nexport const darkTheme = {\r\n    body: '#363537',\r\n    text: '#FAFAFA',\r\n    toggleBorder: '#6B8096',\r\n    background: '#999',\r\n    infoboxColor: '#646165',\r\n    infoboxText: '#FAFAFA',\r\n    tableOddColor: '#575558',\r\n    graphTextColor: '#FAFAFA'\r\n}","import { FormControl, MenuItem, Select, Card, CardContent } from '@material-ui/core';\nimport React, { useState, useEffect } from 'react';\nimport InfoBox from './InfoBox';\nimport Map from './Map';\nimport Table from './Table';\nimport Graph from './Graph';\nimport ThemeSwitch from './ThemeSwitch';\nimport { sortData, prettyPrintStat } from './util';\nimport { ThemeProvider } from \"styled-components\";\nimport { GlobalStyles } from \"./GlobalStyles\";\nimport { lightTheme, darkTheme } from \"./Theme\"\nimport \"leaflet/dist/leaflet.css\"\nimport '../src/App.css';\n\nfunction App() {\n  let worldCenter = { lat: 34, lng: 0 };\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState(worldCenter);\n  const [mapZoom, setMapZoom] = useState(2);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState('cases');\n  const [isChecked, setIsChecked] = useState(false);\n  const [theme, setTheme] = useState('light');\n\n  //Get worldwide data\n  useEffect(() => {\n    fetch('https://disease.sh/v3/covid-19/all')\n      .then(res => res.json())\n      .then(data => {\n        setCountryInfo(data);\n        console.log('%cAPI_WORLD_INFO', 'background-color:#008B8B; font-size: 1.2rem; color:white;', data);\n      });\n  }, []);\n\n\n  //Get countries\n  useEffect(() => {\n    getGlobalData();\n  }, []);\n\n  //Get latest theme from localstorage\n  useEffect(() => {\n    let localTheme = window.localStorage.getItem('theme');\n    if (localTheme) {\n      setTheme(localTheme);\n      localTheme === 'light' ? setIsChecked(false) : setIsChecked(true);\n    } else {\n      setTheme('light');\n      setIsChecked(false);\n      window.localStorage.setItem('theme', 'light');\n    }\n  }, []);\n\n  //API Call to get the data for all the countries\n  const getGlobalData = async () => {\n    await fetch('https://disease.sh/v3/covid-19/countries')\n      .then(res => res.json())\n      .then(data => {\n        const countries = data.map(country => (\n          {\n            name: country.country,\n            value: country.countryInfo.iso2\n          }\n        ));\n\n        const sortedData = sortData(data);\n        setTableData(sortedData);\n        setMapCountries(data);\n        setCountries(countries);\n      });\n  };\n\n  const handleCountryChange = async (e) => {\n    const countryCode = e.target.value;\n    setCountry(countryCode);\n\n    const url = countryCode === 'worldwide' ? 'https://disease.sh/v3/covid-19/all' : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    //Call the data of the selected country\n    await fetch(url)\n      .then(res => res.json())\n      .then(data => {\n        setCountry(countryCode);\n        setCountryInfo(data);\n\n        countryCode === 'worldwide'\n          ? setMapCenter(worldCenter)\n          : setMapCenter({ lat: data.countryInfo.lat, lng: data.countryInfo.long })\n        countryCode === 'worldwide'\n          ? setMapZoom(2)\n          : setMapZoom(4);\n\n        console.log(`%cAPI_${data.country}_INFO`, 'background-color:#DC143C; font-size: 2rem; color:white;', data);\n      })\n  };\n\n  // @TODO FIRST COUNTRY SELECTION BUG!!! \n  // @FIX MEDIA QUERIES in APP-LEFT-APP-RIGHT FLEX\n  // CHANGE CHART TEXT ON THEME TOGGLE\n  // CHANGE MAP COLOR ON THEME TOGGLE\n\n  const themeToggler = () => {\n    theme === 'light' ? setTheme('dark') : setTheme('light');\n    setIsChecked(!isChecked);\n\n    if (!isChecked) {\n      console.log('dark');\n      window.localStorage.setItem('theme', 'dark');\n    } else {\n      console.log('light');\n      window.localStorage.setItem('theme', 'light');\n    }\n  }\n\n  return (\n    <ThemeProvider theme={theme === 'light' ? lightTheme : darkTheme}>\n      <>\n        <GlobalStyles />\n        <div className='app'>\n          <div className=\"app-left\">\n            <div className=\"app-header\">\n              <h1>COVID-19 DATA</h1>\n              <ThemeSwitch isChecked={isChecked} onChange={themeToggler} />\n              <FormControl className=\"app-dropdown\">\n                <Select variant=\"outlined\" value={country} onChange={handleCountryChange}>\n                  <MenuItem value='worldwide'>Worldwide</MenuItem>\n                  {countries.map((country, index) => (\n                    <MenuItem value={country.value} key={index}>{country.name}</MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n            </div>\n            <div className=\"app-stats\">\n              <InfoBox title=\"Cases\" cases={prettyPrintStat(countryInfo.todayCases)} total={prettyPrintStat(countryInfo.cases)} onClick={e => setCasesType('cases')}\n                active={casesType === 'cases'} colorClass='orange'></InfoBox>\n              <InfoBox title=\"Recovered\" cases={prettyPrintStat(countryInfo.todayRecovered)} total={prettyPrintStat(countryInfo.recovered)} onClick={e => setCasesType('recovered')}\n                active={casesType === 'recovered'} colorClass='green'></InfoBox>\n              <InfoBox title=\"Deaths\" cases={prettyPrintStat(countryInfo.todayDeaths)} total={prettyPrintStat(countryInfo.deaths)} onClick={e => setCasesType('deaths')}\n                active={casesType === 'deaths'} colorClass='red'></InfoBox>\n            </div>\n\n            <Map\n              casesType={casesType}\n              countries={mapCountries}\n              center={mapCenter}\n              zoom={mapZoom}\n            />\n          </div>\n          <Card className=\"app-right\">\n            <CardContent>\n              <h3>Live Cases by Country</h3>\n              <Table countries={tableData} />\n              <h3 className=\"app-graphTitle\" >Worldwide new {casesType} </h3>\n              <Graph\n                className=\"app-graph\"\n                casesType={casesType}\n                colorClass={['orange', 'green', 'red']}\n              />\n            </CardContent>\n          </Card>\n        </div>\n      </>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />\n  ,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}